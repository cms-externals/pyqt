// qproxymodel.sip generated by MetaSIP on Fri Oct 29 15:43:58 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QProxyModel : QAbstractItemModel
{
%TypeHeaderCode
#include <qproxymodel.h>
%End

public:
    explicit QProxyModel(QObject *parent /TransferThis/ = 0);
    virtual ~QProxyModel();
    virtual void setModel(QAbstractItemModel * /KeepReference/);
    QAbstractItemModel *model() const;
%If (- Qt_4_7_0)
    virtual QModelIndex index(int, int, const QModelIndex &) const;
%End
%If (Qt_4_7_0 -)
    virtual QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
%End
    virtual QModelIndex parent(const QModelIndex &) const;
    QObject *parent() const;
%If (- Qt_4_7_0)
    virtual int rowCount(const QModelIndex &) const;
%End
%If (Qt_4_7_0 -)
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual int columnCount(const QModelIndex &) const;
%End
%If (Qt_4_7_0 -)
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual bool hasChildren(const QModelIndex &) const;
%End
%If (Qt_4_7_0 -)
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual QVariant data(const QModelIndex &, int) const;
%End
%If (Qt_4_7_0 -)
    virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
%End
%If (- Qt_4_7_0)
    virtual bool setData(const QModelIndex &, const QVariant &, int);
%End
%If (Qt_4_7_0 -)
    virtual bool setData(const QModelIndex &, const QVariant &, int role = Qt::EditRole);
%End
%If (- Qt_4_7_0)
    virtual QVariant headerData(int, Qt::Orientation, int) const;
%End
%If (Qt_4_7_0 -)
    virtual QVariant headerData(int, Qt::Orientation, int role = Qt::DisplayRole) const;
%End
%If (- Qt_4_7_0)
    virtual bool setHeaderData(int, Qt::Orientation, const QVariant &, int);
%End
%If (Qt_4_7_0 -)
    virtual bool setHeaderData(int, Qt::Orientation, const QVariant &, int role = Qt::EditRole);
%End
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &) const /TransferBack/;
    virtual bool dropMimeData(const QMimeData *, Qt::DropAction, int, int, const QModelIndex &);
    virtual Qt::DropActions supportedDropActions() const;
%If (- Qt_4_7_0)
    virtual bool insertRows(int, int, const QModelIndex &);
%End
%If (Qt_4_7_0 -)
    virtual bool insertRows(int, int, const QModelIndex &parent = QModelIndex());
%End
%If (- Qt_4_7_0)
    virtual bool insertColumns(int, int, const QModelIndex &);
%End
%If (Qt_4_7_0 -)
    virtual bool insertColumns(int, int, const QModelIndex &parent = QModelIndex());
%End
    virtual void fetchMore(const QModelIndex &);
    virtual Qt::ItemFlags flags(const QModelIndex &) const;
%If (- Qt_4_7_0)
    virtual void sort(int, Qt::SortOrder);
%End
%If (Qt_4_7_0 -)
    virtual void sort(int, Qt::SortOrder order = Qt::AscendingOrder);
%End
%If (- Qt_4_7_0)
    virtual QModelIndexList match(const QModelIndex &, int, const QVariant &, int, Qt::MatchFlags) const;
%End
%If (Qt_4_7_0 -)
    virtual QModelIndexList match(const QModelIndex &, int, const QVariant &, int hits = 1, Qt::MatchFlags flags = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
%End
    virtual QSize span(const QModelIndex &) const;
    virtual bool submit();
    virtual void revert();

private:
    QProxyModel(const QProxyModel &);
};
